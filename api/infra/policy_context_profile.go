//nolint:revive
package infra

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/global_infra"
	model1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt-gm/model"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client2 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type PolicyContextProfileClientContext utl.ClientContext

func NewContextProfilesClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *PolicyContextProfileClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewContextProfilesClient(connector)

	case utl.Global:
		client = client1.NewContextProfilesClient(connector)

	case utl.Multitenancy:
		client = client2.NewContextProfilesClient(connector)

	default:
		return nil
	}
	return &PolicyContextProfileClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c PolicyContextProfileClientContext) Get(contextProfileIdParam string) (model0.PolicyContextProfile, error) {
	var obj model0.PolicyContextProfile
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ContextProfilesClient)
		obj, err = client.Get(contextProfileIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Global:
		client := c.Client.(client1.ContextProfilesClient)
		gmObj, err1 := client.Get(contextProfileIdParam)
		if err1 != nil {
			return obj, err1
		}
		var rawObj interface{}
		rawObj, err = utl.ConvertModelBindingType(gmObj, model1.PolicyContextProfileBindingType(), model0.PolicyContextProfileBindingType())
		obj = rawObj.(model0.PolicyContextProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.ContextProfilesClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, contextProfileIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c PolicyContextProfileClientContext) Patch(contextProfileIdParam string, policyContextProfileParam model0.PolicyContextProfile, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ContextProfilesClient)
		err = client.Patch(contextProfileIdParam, policyContextProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.ContextProfilesClient)
		gmObj, err1 := utl.ConvertModelBindingType(policyContextProfileParam, model0.PolicyContextProfileBindingType(), model1.PolicyContextProfileBindingType())
		if err1 != nil {
			return err1
		}
		err = client.Patch(contextProfileIdParam, gmObj.(model1.PolicyContextProfile), overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.ContextProfilesClient)
		err = client.Patch(utl.DefaultOrgID, c.ProjectID, contextProfileIdParam, policyContextProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c PolicyContextProfileClientContext) Update(contextProfileIdParam string, policyContextProfileParam model0.PolicyContextProfile, overrideParam *bool) (model0.PolicyContextProfile, error) {
	var err error
	var obj model0.PolicyContextProfile

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ContextProfilesClient)
		obj, err = client.Update(contextProfileIdParam, policyContextProfileParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.ContextProfilesClient)
		gmObj, err := utl.ConvertModelBindingType(policyContextProfileParam, model0.PolicyContextProfileBindingType(), model1.PolicyContextProfileBindingType())
		if err != nil {
			return obj, err
		}
		gmObj, err = client.Update(contextProfileIdParam, gmObj.(model1.PolicyContextProfile), overrideParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.PolicyContextProfileBindingType(), model0.PolicyContextProfileBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.PolicyContextProfile)

	case utl.Multitenancy:
		client := c.Client.(client2.ContextProfilesClient)
		obj, err = client.Update(utl.DefaultOrgID, c.ProjectID, contextProfileIdParam, policyContextProfileParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c PolicyContextProfileClientContext) Delete(contextProfileIdParam string, forceParam *bool, overrideParam *bool) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ContextProfilesClient)
		err = client.Delete(contextProfileIdParam, forceParam, overrideParam)

	case utl.Global:
		client := c.Client.(client1.ContextProfilesClient)
		err = client.Delete(contextProfileIdParam, forceParam, overrideParam)

	case utl.Multitenancy:
		client := c.Client.(client2.ContextProfilesClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, contextProfileIdParam, forceParam, overrideParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c PolicyContextProfileClientContext) List(cursorParam *string, hasUnsupportedAppIdsParam *bool, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.PolicyContextProfileListResult, error) {
	var err error
	var obj model0.PolicyContextProfileListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.ContextProfilesClient)

		obj, err = client.List(cursorParam, hasUnsupportedAppIdsParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Global:
		client := c.Client.(client1.ContextProfilesClient)
		gmObj, err := client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
		if err != nil {
			return obj, err
		}
		obj1, err1 := utl.ConvertModelBindingType(gmObj, model1.PolicyContextProfileListResultBindingType(), model0.PolicyContextProfileListResultBindingType())
		if err1 != nil {
			return obj, err1
		}
		obj = obj1.(model0.PolicyContextProfileListResult)

	case utl.Multitenancy:
		client := c.Client.(client2.ContextProfilesClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, cursorParam, hasUnsupportedAppIdsParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
