// Code generated by MockGen. DO NOT EDIT.

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
)

// MockServicesClient is a mock of ServicesClient interface.
type MockServicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockServicesClientMockRecorder
}

// MockServicesClientMockRecorder is the mock recorder for MockServicesClient.
type MockServicesClientMockRecorder struct {
	mock *MockServicesClient
}

// NewMockServicesClient creates a new mock instance.
func NewMockServicesClient(ctrl *gomock.Controller) *MockServicesClient {
	mock := &MockServicesClient{ctrl: ctrl}
	mock.recorder = &MockServicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicesClient) EXPECT() *MockServicesClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServicesClient) Delete(serviceIdParam string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", serviceIdParam)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServicesClientMockRecorder) Delete(serviceIdParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicesClient)(nil).Delete), serviceIdParam)
}

// Get mocks base method.
func (m *MockServicesClient) Get(serviceIdParam string) (model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", serviceIdParam)
	ret0, _ := ret[0].(model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServicesClientMockRecorder) Get(serviceIdParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServicesClient)(nil).Get), serviceIdParam)
}

// List mocks base method.
func (m *MockServicesClient) List(cursorParam *string, defaultServiceParam, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model.ServiceListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", cursorParam, defaultServiceParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
	ret0, _ := ret[0].(model.ServiceListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServicesClientMockRecorder) List(cursorParam, defaultServiceParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServicesClient)(nil).List), cursorParam, defaultServiceParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)
}

// Patch mocks base method.
func (m *MockServicesClient) Patch(serviceIdParam string, serviceParam model.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", serviceIdParam, serviceParam)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockServicesClientMockRecorder) Patch(serviceIdParam, serviceParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockServicesClient)(nil).Patch), serviceIdParam, serviceParam)
}

// Update mocks base method.
func (m *MockServicesClient) Update(serviceIdParam string, serviceParam model.Service) (model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", serviceIdParam, serviceParam)
	ret0, _ := ret[0].(model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServicesClientMockRecorder) Update(serviceIdParam, serviceParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServicesClient)(nil).Update), serviceIdParam, serviceParam)
}
