// Â© Broadcom. All Rights Reserved.
// The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
// SPDX-License-Identifier: MPL-2.0

package nsxt

import (
	"fmt"
	"testing"

        "github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
        "github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

var accTestPolicy<!RESOURCE!>CreateAttributes = map[string]string{
	"display_name": getAccTestResourceName(),
	"description":  "terraform created",
        <!TEST_ATTRS_CREATE!>
}

var accTestPolicy<!RESOURCE!>UpdateAttributes = map[string]string{
	"display_name": getAccTestResourceName(),
	"description":  "terraform updated",
        <!TEST_ATTRS_UPDATE!>
}

func TestAccResourceNsxtPolicy<!RESOURCE!>_basic(t *testing.T) {
	testResourceName := "nsxt_policy_<!resource_lower!>.test"

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		CheckDestroy: func(state *terraform.State) error {
			return testAccNsxtPolicy<!RESOURCE!>CheckDestroy(state, accTestPolicy<!RESOURCE!>UpdateAttributes["display_name"])
		},
		Steps: []resource.TestStep{
			{
				Config: testAccNsxtPolicy<!RESOURCE!>Template(true),
				Check: resource.ComposeTestCheckFunc(
					testAccNsxtPolicy<!RESOURCE!>Exists(accTestPolicy<!RESOURCE!>CreateAttributes["display_name"], testResourceName),
					resource.TestCheckResourceAttr(testResourceName, "display_name", accTestPolicy<!RESOURCE!>CreateAttributes["display_name"]),
					resource.TestCheckResourceAttr(testResourceName, "description", accTestPolicy<!RESOURCE!>CreateAttributes["description"]),
                                        <!CHECK_ATTRS_CREATE!>
					resource.TestCheckResourceAttrSet(testResourceName, "nsx_id"),
					resource.TestCheckResourceAttrSet(testResourceName, "path"),
					resource.TestCheckResourceAttrSet(testResourceName, "revision"),
					resource.TestCheckResourceAttr(testResourceName, "tag.#", "1"),
				),
			},
			{
				Config: testAccNsxtPolicy<!RESOURCE!>Template(false),
				Check: resource.ComposeTestCheckFunc(
					testAccNsxtPolicy<!RESOURCE!>Exists(accTestPolicy<!RESOURCE!>UpdateAttributes["display_name"], testResourceName),
					resource.TestCheckResourceAttr(testResourceName, "display_name", accTestPolicy<!RESOURCE!>UpdateAttributes["display_name"]),
					resource.TestCheckResourceAttr(testResourceName, "description", accTestPolicy<!RESOURCE!>UpdateAttributes["description"]),
                                        <!CHECK_ATTRS_UPDATE!>
					resource.TestCheckResourceAttrSet(testResourceName, "nsx_id"),
					resource.TestCheckResourceAttrSet(testResourceName, "path"),
					resource.TestCheckResourceAttrSet(testResourceName, "revision"),
					resource.TestCheckResourceAttr(testResourceName, "tag.#", "1"),
				),
			},
			{
				Config: testAccNsxtPolicy<!RESOURCE!>Minimalistic(),
				Check: resource.ComposeTestCheckFunc(
					testAccNsxtPolicy<!RESOURCE!>Exists(accTestPolicy<!RESOURCE!>CreateAttributes["display_name"], testResourceName),
					resource.TestCheckResourceAttr(testResourceName, "description", ""),
					resource.TestCheckResourceAttrSet(testResourceName, "nsx_id"),
					resource.TestCheckResourceAttrSet(testResourceName, "path"),
					resource.TestCheckResourceAttrSet(testResourceName, "revision"),
					resource.TestCheckResourceAttr(testResourceName, "tag.#", "0"),
				),
			},
		},
	})
}

func TestAccResourceNsxtPolicy<!RESOURCE!>_importBasic(t *testing.T) {
	name := getAccTestResourceName()
	testResourceName := "nsxt_policy_<!resource_lower!>.test"

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		CheckDestroy: func(state *terraform.State) error {
			return testAccNsxtPolicy<!RESOURCE!>CheckDestroy(state, name)
		},
		Steps: []resource.TestStep{
			{
				Config: testAccNsxtPolicy<!RESOURCE!>Minimalistic(),
			},
			{
				ResourceName:      testResourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccNsxtPolicy<!RESOURCE!>Exists(displayName string, resourceName string) resource.TestCheckFunc {
	return func(state *terraform.State) error {

		connector := getPolicyConnector(testAccProvider.Meta().(nsxtClients))

		rs, ok := state.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Policy <!RESOURCE!> resource %s not found in resources", resourceName)
		}

		resourceID := rs.Primary.ID
		if resourceID == "" {
			return fmt.Errorf("Policy <!RESOURCE!> resource ID not set in resources")
		}

                exists, err := resourceNsxtPolicy<!RESOURCE!>Exists(resourceID, connector, testAccIsGlobalManager())
                if err != nil {
                    return err
                }
		if !exists {
                    return fmt.Errorf("Policy <!RESOURCE!> %s does not exist", resourceID)
		}

		return nil
	}
}

func testAccNsxtPolicy<!RESOURCE!>CheckDestroy(state *terraform.State, displayName string) error {
	connector := getPolicyConnector(testAccProvider.Meta().(nsxtClients))
	for _, rs := range state.RootModule().Resources {

		if rs.Type != "nsxt_policy_<!resource_lower!>" {
			continue
		}

		resourceID := rs.Primary.Attributes["id"]
                exists, err := resourceNsxtPolicy<!RESOURCE!>Exists(resourceID, connector, testAccIsGlobalManager())
		if err == nil {
			return err
		}

                if exists {
                        return fmt.Errorf("Policy <!RESOURCE!> %s still exists", displayName)
                }
	}
	return nil
}

func testAccNsxtPolicy<!RESOURCE!>Template(createFlow bool) string {
	var attrMap map[string]string
	if createFlow {
		attrMap = accTestPolicy<!RESOURCE!>CreateAttributes
	} else {
		attrMap = accTestPolicy<!RESOURCE!>UpdateAttributes
	}
	return fmt.Sprintf(`
resource "nsxt_policy_<!resource_lower!>" "test" {
  display_name = "%s"
  description  = "%s"
<!TEST_ATTRS!>
  tag {
    scope = "scope1"
    tag   = "tag1"
  }
}`, attrMap["display_name"], attrMap["description"]<!TEST_ATTRS_SPRINTF!>)
}

func testAccNsxtPolicy<!RESOURCE!>Minimalistic() string {
	return fmt.Sprintf(`
resource "nsxt_policy_<!resource_lower!>" "test" {
  display_name = "%s"
<!TEST_REQUIRED_ATTRS!>
}`, accTestPolicy<!RESOURCE!>UpdateAttributes["display_name"]<!TEST_REQUIRED_ATTRS_SPRINTF!>)
}
