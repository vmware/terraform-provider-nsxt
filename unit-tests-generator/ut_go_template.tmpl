package nsxt

import (
	"log"
	"testing"
	
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test{{.ResourceName}}Create(t *testing.T) {
	mockProviderClient, m := newMockProviderClient(emptyBody)
	d := schema.TestResourceDataRaw(t, {{.SchemaFunction}}().Schema, map[string]interface{}{
		"display_name": "foo",
		"description":  "This is a foo service",
		// Add all the 'Required' arguments here depending on the resource.
	})

	err := {{.CreateFunc}}(d, mockProviderClient)
	
	log.Println("Cache Request body :", m.cache)
	
	require.Empty(t, err)
	
	// Test the value you get from the API cache with the actual value. 
	// You can add multiple checks here based on the resource (like description, tags, ip_address)
	// The actual value in the below function (3rd argument) can be given in a jq query format. Eg.: "children.0.Segment.display_name" 
	// This can be obtained easily by going through the logs above. Search for "Cache Request body". 
	
	assert.Equal(t, "foo", getGjsonString(m.cache[0], "display_name"))
	
}

func Test{{.ResourceName}}Read(t *testing.T) {
	mockProviderClient, _ := newMockProviderClient({{.ResourceOpVariableName}})

	d := schema.TestResourceDataRaw(t, {{.SchemaFunction}}().Schema, map[string]interface{}{
		"display_name": "foo",
		// Add all the 'Required' arguments here depending on the resource.
	})
	d.SetId("foo")
	
	err := {{.ReadFunc}}(d, mockProviderClient)
	
	require.Empty(t, err)
	
	// Test the value you get from the API cache with the actual value. 
	// You can add multiple checks here based on the resource (like description, tags, ip_address)
	
	assert.Equal(t, d.Get("path"), "/infra/services/my-http")
	assert.Equal(t, d.Id(), "foo")
}

func Test{{.ResourceName}}Update(t *testing.T) {
	mockProviderClient, m := newMockProviderClient(emptyBody)

	d := schema.TestResourceDataRaw(t, {{.SchemaFunction}}().Schema, map[string]interface{}{
		"display_name": "foo",
		// Add all the 'Required' arguments here depending on the resource.
	})
	d.SetId("foo")
	err := {{.UpdateFunc}}(d, mockProviderClient)

	log.Println("Cache Request body :", m.cache)

	require.Empty(t, err)
	
	// Test the value you get from the API cache with the actual value. 
	// You can add multiple checks here based on the resource (like description, tags, ip_address)
	// The actual value in the below function (3rd argument) can be given in a jq query format. Eg.: "children.0.Segment.display_name" 
	// This can be obtained easily by going through the logs above. Search for "Cache Request body". 
	
	assert.Equal(t, "foo", getGjsonString(m.cache[0], "display_name"))
	assert.Equal(t, d.Id(), "foo")
}

func Test{{.ResourceName}}Delete(t *testing.T) {
	mockProviderClient, m := newMockProviderClient(emptyBody)
	
	d := schema.TestResourceDataRaw(t, {{.SchemaFunction}}().Schema, map[string]interface{}{
		"display_name": "foo",
		// Add all the 'Required' arguments here depending on the resource.
	})
	d.SetId("foo")
	err := {{.DeleteFunc}}(d, mockProviderClient)

	log.Println("Cache Request body :", m.cache)
	
	// Test the value you get from the API cache with the actual value. 
	// You can add multiple checks here based on the resource (like description, tags, ip_address)
	
	require.Empty(t, err)
	assert.Equal(t, d.Id(), "foo")
}

